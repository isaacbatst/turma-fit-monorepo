// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String         @id @default(uuid())
  email     String         @unique
  name      String
  password  String
  sessions  AdminSession[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
}

model AdminSession {
  token       String    @id
  createdAt   DateTime
  loggedOutAt DateTime?
  expiresIn   Int
  user        Admin     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Muscle {
  id        String     @id @default(uuid())
  name      String     @unique
  moviments Moviment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model Equipment {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  exercises Exercise[]
}

model Moviment {
  id        String     @id @default(uuid())
  name      String     @unique
  muscle    Muscle     @relation(fields: [muscleId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  muscleId  String
  exercise  Exercise[]
}

model Training {
  id               String             @id @default(uuid())
  exerciseSets     ExerciseSet[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  weekPlanTrainings WeekPlanTraining[]
}

model ExerciseSet {
  id          String     @id @default(uuid())
  training    Training   @relation(fields: [trainingId], references: [id])
  trainingId  String
  exercises   Exercise[]
  sets        Int
  repetitions Int
  order       Int        @default(1)
  restTime    Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
}

enum Grip {
  SUPINATED
  PRONATED
  NEUTRAL
}

model Exercise {
  id            String      @id @default(uuid())
  moviment      Moviment    @relation(fields: [movimentId], references: [id])
  movimentId    String
  equipments    Equipment[]
  grip          Grip?
  exerciseSet   ExerciseSet @relation(fields: [exerciseSetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseSetId String
}

model WeekPlan {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  weekPlanTrainings WeekPlanTraining[]
}

model WeekPlanTraining {
  weekPlan   WeekPlan @relation(fields: [weekPlanId], references: [id])
  weekPlanId String
  training   Training @relation(fields: [trainingId], references: [id])
  trainingId String
  order      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@id([weekPlanId, trainingId, order])
}
